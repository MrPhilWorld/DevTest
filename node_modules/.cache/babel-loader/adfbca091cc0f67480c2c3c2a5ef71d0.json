{"ast":null,"code":"var _jsxFileName = \"/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regex = /([\\S\\s]){1,80}\\b/g;\nlet lines = \"\";\n\nclass StringSplitter extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.onDragOver = ev => {\n      ev.preventDefault();\n    };\n\n    this.onDragStart = (ev, id) => {\n      console.log(\"drag started for: \" + id);\n      ev.dataTransfer.setData(\"id\", id);\n    };\n\n    this.onDrop = (ev, id) => {\n      let oldId = ev.dataTransfer.getData(\"id\");\n      console.log(\"dropped \" + oldId + \" on \" + id);\n      var a = lines[oldId];\n      lines[oldId] = lines[id];\n      lines[id] = a;\n      console.log(lines);\n      this.render();\n    };\n  }\n\n  render() {\n    lines = this.props.length.match(regex);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: lines.map((line, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        draggable: true,\n        onDragOver: e => this.onDragOver(e),\n        onDragStart: e => this.onDragStart(e, i),\n        onDrop: e => this.onDrop(e, i),\n        children: [line, \" \", line.length, \" \", i]\n      }, line, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StringSplitter;","map":{"version":3,"sources":["/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js"],"names":["React","Component","regex","lines","StringSplitter","onDragOver","ev","preventDefault","onDragStart","id","console","log","dataTransfer","setData","onDrop","oldId","getData","a","render","props","length","match","map","line","i","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,KAAK,GAAG,mBAAd;AAEA,IAAIC,KAAK,GAAG,EAAZ;;AAEA,MAAMC,cAAN,SAA6BH,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SACrCI,UADqC,GACvBC,EAAD,IAAQ;AACnBA,MAAAA,EAAE,CAACC,cAAH;AACD,KAHoC;;AAAA,SAKrCC,WALqC,GAKvB,CAACF,EAAD,EAAKG,EAAL,KAAY;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBF,EAAnC;AACAH,MAAAA,EAAE,CAACM,YAAH,CAAgBC,OAAhB,CAAwB,IAAxB,EAA8BJ,EAA9B;AACD,KARoC;;AAAA,SAUrCK,MAVqC,GAU5B,CAACR,EAAD,EAAKG,EAAL,KAAY;AACnB,UAAIM,KAAK,GAAGT,EAAE,CAACM,YAAH,CAAgBI,OAAhB,CAAwB,IAAxB,CAAZ;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaI,KAAb,GAAqB,MAArB,GAA8BN,EAA1C;AACA,UAAIQ,CAAC,GAAGd,KAAK,CAACY,KAAD,CAAb;AACAZ,MAAAA,KAAK,CAACY,KAAD,CAAL,GAAeZ,KAAK,CAACM,EAAD,CAApB;AACAN,MAAAA,KAAK,CAACM,EAAD,CAAL,GAAYQ,CAAZ;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,WAAKe,MAAL;AACD,KAlBoC;AAAA;;AAoBrCA,EAAAA,MAAM,GAAG;AACPf,IAAAA,KAAK,GAAG,KAAKgB,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,CAAwBnB,KAAxB,CAAR;AAEA,wBACE;AAAA,gBACGC,KAAK,CAACmB,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBACT;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,UAAU,EAAGC,CAAD,IAAO,KAAKpB,UAAL,CAAgBoB,CAAhB,CAHrB;AAIE,QAAA,WAAW,EAAGA,CAAD,IAAO,KAAKjB,WAAL,CAAiBiB,CAAjB,EAAoBD,CAApB,CAJtB;AAKE,QAAA,MAAM,EAAGC,CAAD,IAAO,KAAKX,MAAL,CAAYW,CAAZ,EAAeD,CAAf,CALjB;AAAA,mBAOGD,IAPH,OAOUA,IAAI,CAACH,MAPf,OAOwBI,CAPxB;AAAA,SACOD,IADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAtCoC;;AAyCvC,eAAenB,cAAf","sourcesContent":["import React, { Component } from \"react\";\n\nconst regex = /([\\S\\s]){1,80}\\b/g;\n\nlet lines = \"\";\n\nclass StringSplitter extends Component {\n  onDragOver = (ev) => {\n    ev.preventDefault();\n  };\n\n  onDragStart = (ev, id) => {\n    console.log(\"drag started for: \" + id);\n    ev.dataTransfer.setData(\"id\", id);\n  };\n\n  onDrop = (ev, id) => {\n    let oldId = ev.dataTransfer.getData(\"id\");\n    console.log(\"dropped \" + oldId + \" on \" + id);\n    var a = lines[oldId];\n    lines[oldId] = lines[id];\n    lines[id] = a;\n    console.log(lines);\n    this.render();\n  };\n\n  render() {\n    lines = this.props.length.match(regex);\n\n    return (\n      <div>\n        {lines.map((line, i) => (\n          <div\n            key={line}\n            draggable\n            onDragOver={(e) => this.onDragOver(e)}\n            onDragStart={(e) => this.onDragStart(e, i)}\n            onDrop={(e) => this.onDrop(e, i)}\n          >\n            {line} {line.length} {i}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default StringSplitter;\n"]},"metadata":{},"sourceType":"module"}