{"ast":null,"code":"var _jsxFileName = \"/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regex = /([\\S\\s]){1,80}\\b/g;\n\nclass StringSplitter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDragStart = (e, id) => {\n      console.log(\"drag started for: \" + id);\n      e.dataTransfer.setData(\"id\", id);\n    };\n\n    this.onDrop = (e, id) => {\n      var oldId = e.dataTransfer.getData(\"id\");\n      console.log(\"dropped \" + oldId + \" on \" + id);\n      this.setState({\n        lines: this.reorderLines(id, oldId)\n      });\n    };\n\n    this.onChange = () => {\n      console.log(\"list changed\");\n    };\n\n    this.state = {\n      lines: this.props.length.match(regex)\n    };\n  }\n\n  reorderLines(id, oldId) {\n    var tempLines = this.state.lines;\n    var a = tempLines[oldId];\n    tempLines[oldId] = tempLines[id];\n    tempLines[id] = a;\n    console.log(tempLines);\n    return tempLines;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.lines.map((line, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        draggable: true,\n        onDragOver: e => this.onDragOver(e),\n        onDragStart: e => this.onDragStart(e, i),\n        onDrop: e => this.onDrop(e, i),\n        onChange: this.onChange,\n        children: [line, \" \", line.length, \" \", i]\n      }, line, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StringSplitter;","map":{"version":3,"sources":["/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js"],"names":["React","Component","regex","StringSplitter","constructor","props","onDragOver","e","preventDefault","onDragStart","id","console","log","dataTransfer","setData","onDrop","oldId","getData","setState","lines","reorderLines","onChange","state","length","match","tempLines","a","render","map","line","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,KAAK,GAAG,mBAAd;;AAEA,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,UAPmB,GAOLC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACD,KATkB;;AAAA,SAWnBC,WAXmB,GAWL,CAACF,CAAD,EAAIG,EAAJ,KAAW;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBF,EAAnC;AACAH,MAAAA,CAAC,CAACM,YAAF,CAAeC,OAAf,CAAuB,IAAvB,EAA6BJ,EAA7B;AACD,KAdkB;;AAAA,SAgBnBK,MAhBmB,GAgBV,CAACR,CAAD,EAAIG,EAAJ,KAAW;AAClB,UAAIM,KAAK,GAAGT,CAAC,CAACM,YAAF,CAAeI,OAAf,CAAuB,IAAvB,CAAZ;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaI,KAAb,GAAqB,MAArB,GAA8BN,EAA1C;AAEA,WAAKQ,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAE,KAAKC,YAAL,CAAkBV,EAAlB,EAAsBM,KAAtB;AADK,OAAd;AAGD,KAvBkB;;AAAA,SAyBnBK,QAzBmB,GAyBR,MAAM;AACfV,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,KA3BkB;;AAEjB,SAAKU,KAAL,GAAa;AACXH,MAAAA,KAAK,EAAE,KAAKd,KAAL,CAAWkB,MAAX,CAAkBC,KAAlB,CAAwBtB,KAAxB;AADI,KAAb;AAGD;;AAwBDkB,EAAAA,YAAY,CAACV,EAAD,EAAKM,KAAL,EAAY;AACtB,QAAIS,SAAS,GAAG,KAAKH,KAAL,CAAWH,KAA3B;AACA,QAAIO,CAAC,GAAGD,SAAS,CAACT,KAAD,CAAjB;AACAS,IAAAA,SAAS,CAACT,KAAD,CAAT,GAAmBS,SAAS,CAACf,EAAD,CAA5B;AACAe,IAAAA,SAAS,CAACf,EAAD,CAAT,GAAgBgB,CAAhB;AAEAf,IAAAA,OAAO,CAACC,GAAR,CAAYa,SAAZ;AACA,WAAOA,SAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,gBACG,KAAKL,KAAL,CAAWH,KAAX,CAAiBS,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,kBACpB;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,UAAU,EAAGvB,CAAD,IAAO,KAAKD,UAAL,CAAgBC,CAAhB,CAHrB;AAIE,QAAA,WAAW,EAAGA,CAAD,IAAO,KAAKE,WAAL,CAAiBF,CAAjB,EAAoBuB,CAApB,CAJtB;AAKE,QAAA,MAAM,EAAGvB,CAAD,IAAO,KAAKQ,MAAL,CAAYR,CAAZ,EAAeuB,CAAf,CALjB;AAME,QAAA,QAAQ,EAAE,KAAKT,QANjB;AAAA,mBAQGQ,IARH,OAQUA,IAAI,CAACN,MARf,OAQwBO,CARxB;AAAA,SACOD,IADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAzDoC;;AA4DvC,eAAe1B,cAAf","sourcesContent":["import React, { Component } from \"react\";\n\nconst regex = /([\\S\\s]){1,80}\\b/g;\n\nclass StringSplitter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lines: this.props.length.match(regex),\n    };\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  onDragStart = (e, id) => {\n    console.log(\"drag started for: \" + id);\n    e.dataTransfer.setData(\"id\", id);\n  };\n\n  onDrop = (e, id) => {\n    var oldId = e.dataTransfer.getData(\"id\");\n    console.log(\"dropped \" + oldId + \" on \" + id);\n\n    this.setState({\n      lines: this.reorderLines(id, oldId),\n    });\n  };\n\n  onChange = () => {\n    console.log(\"list changed\");\n  };\n\n  reorderLines(id, oldId) {\n    var tempLines = this.state.lines;\n    var a = tempLines[oldId];\n    tempLines[oldId] = tempLines[id];\n    tempLines[id] = a;\n\n    console.log(tempLines);\n    return tempLines;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.lines.map((line, i) => (\n          <div\n            key={line}\n            draggable\n            onDragOver={(e) => this.onDragOver(e)}\n            onDragStart={(e) => this.onDragStart(e, i)}\n            onDrop={(e) => this.onDrop(e, i)}\n            onChange={this.onChange}\n          >\n            {line} {line.length} {i}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default StringSplitter;\n"]},"metadata":{},"sourceType":"module"}