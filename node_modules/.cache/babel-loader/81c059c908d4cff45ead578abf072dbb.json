{"ast":null,"code":"var _jsxFileName = \"/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regex = /([\\S\\s]){1,80}\\b/g;\n\nclass StringSplitter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDragStart = (e, id) => {\n      console.log(\"drag started for: \" + id);\n      e.dataTransfer.setData(\"id\", id);\n    };\n\n    this.onDrop = (e, id) => {\n      let oldId = e.dataTransfer.getData(\"id\");\n      console.log(\"dropped \" + oldId + \" on \" + id);\n      this.setState({\n        lines: reorderLines(id, oldId)\n      });\n    };\n\n    this.state = {\n      lines: this.props.length.match(regex)\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.lines.map((line, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        draggable: true,\n        onDragOver: e => this.onDragOver(e),\n        onDragStart: e => this.onDragStart(e, i),\n        onDrop: e => this.onDrop(e, i),\n        children: [line, \" \", line.length, \" \", i]\n      }, line, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nreorderLines = (id, oldId) => {\n  var tempLines = this.state.lines;\n  var a = tempLines[oldId];\n  tempLines[oldId] = tempLines[id];\n  tempLines[id] = a;\n  console.log(tempLines);\n  return tempLines;\n};\n\nexport default StringSplitter;","map":{"version":3,"sources":["/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js"],"names":["React","Component","regex","StringSplitter","constructor","props","onDragOver","e","preventDefault","onDragStart","id","console","log","dataTransfer","setData","onDrop","oldId","getData","setState","lines","reorderLines","state","length","match","render","map","line","i","tempLines","a"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,KAAK,GAAG,mBAAd;;AAEA,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,UAPmB,GAOLC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACD,KATkB;;AAAA,SAWnBC,WAXmB,GAWL,CAACF,CAAD,EAAIG,EAAJ,KAAW;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBF,EAAnC;AACAH,MAAAA,CAAC,CAACM,YAAF,CAAeC,OAAf,CAAuB,IAAvB,EAA6BJ,EAA7B;AACD,KAdkB;;AAAA,SAgBnBK,MAhBmB,GAgBV,CAACR,CAAD,EAAIG,EAAJ,KAAW;AAClB,UAAIM,KAAK,GAAGT,CAAC,CAACM,YAAF,CAAeI,OAAf,CAAuB,IAAvB,CAAZ;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaI,KAAb,GAAqB,MAArB,GAA8BN,EAA1C;AAEA,WAAKQ,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEC,YAAY,CAACV,EAAD,EAAKM,KAAL;AADP,OAAd;AAGD,KAvBkB;;AAEjB,SAAKK,KAAL,GAAa;AACXF,MAAAA,KAAK,EAAE,KAAKd,KAAL,CAAWiB,MAAX,CAAkBC,KAAlB,CAAwBrB,KAAxB;AADI,KAAb;AAGD;;AAoBDsB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,gBACG,KAAKH,KAAL,CAAWF,KAAX,CAAiBM,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,kBACpB;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,UAAU,EAAGpB,CAAD,IAAO,KAAKD,UAAL,CAAgBC,CAAhB,CAHrB;AAIE,QAAA,WAAW,EAAGA,CAAD,IAAO,KAAKE,WAAL,CAAiBF,CAAjB,EAAoBoB,CAApB,CAJtB;AAKE,QAAA,MAAM,EAAGpB,CAAD,IAAO,KAAKQ,MAAL,CAAYR,CAAZ,EAAeoB,CAAf,CALjB;AAAA,mBAOGD,IAPH,OAOUA,IAAI,CAACJ,MAPf,OAOwBK,CAPxB;AAAA,SACOD,IADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA1CoC;;AA6CvCN,YAAY,GAAG,CAACV,EAAD,EAAKM,KAAL,KAAe;AAC5B,MAAIY,SAAS,GAAG,KAAKP,KAAL,CAAWF,KAA3B;AACA,MAAIU,CAAC,GAAGD,SAAS,CAACZ,KAAD,CAAjB;AACAY,EAAAA,SAAS,CAACZ,KAAD,CAAT,GAAmBY,SAAS,CAAClB,EAAD,CAA5B;AACAkB,EAAAA,SAAS,CAAClB,EAAD,CAAT,GAAgBmB,CAAhB;AAEAlB,EAAAA,OAAO,CAACC,GAAR,CAAYgB,SAAZ;AACA,SAAOA,SAAP;AACD,CARD;;AAUA,eAAezB,cAAf","sourcesContent":["import React, { Component } from \"react\";\n\nconst regex = /([\\S\\s]){1,80}\\b/g;\n\nclass StringSplitter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lines: this.props.length.match(regex),\n    };\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  onDragStart = (e, id) => {\n    console.log(\"drag started for: \" + id);\n    e.dataTransfer.setData(\"id\", id);\n  };\n\n  onDrop = (e, id) => {\n    let oldId = e.dataTransfer.getData(\"id\");\n    console.log(\"dropped \" + oldId + \" on \" + id);\n\n    this.setState({\n      lines: reorderLines(id, oldId),\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.lines.map((line, i) => (\n          <div\n            key={line}\n            draggable\n            onDragOver={(e) => this.onDragOver(e)}\n            onDragStart={(e) => this.onDragStart(e, i)}\n            onDrop={(e) => this.onDrop(e, i)}\n          >\n            {line} {line.length} {i}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nreorderLines = (id, oldId) => {\n  var tempLines = this.state.lines;\n  var a = tempLines[oldId];\n  tempLines[oldId] = tempLines[id];\n  tempLines[id] = a;\n\n  console.log(tempLines);\n  return tempLines;\n};\n\nexport default StringSplitter;\n"]},"metadata":{},"sourceType":"module"}