{"ast":null,"code":"var _jsxFileName = \"/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regex = /([\\S\\s]){1,80}\\b/g;\n\nclass StringSplitter extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      lines: this.props.length.match(regex)\n    };\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDragStart = (e, id) => {\n      console.log(\"drag started for: \" + id);\n      e.dataTransfer.setData(\"id\", id);\n    };\n\n    this.onDrop = (e, id) => {\n      let oldId = e.dataTransfer.getData(\"id\");\n      console.log(\"dropped \" + oldId + \" on \" + id);\n      var a = this.state.lines[oldId];\n      this.state.lines[oldId] = this.state.lines[id];\n      this.state.lines[id] = a;\n      console.log(lines);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.lines.map((line, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        draggable: true,\n        onDragOver: e => this.onDragOver(e),\n        onDragStart: e => this.onDragStart(e, i),\n        onDrop: e => this.onDrop(e, i),\n        children: [line, \" \", line.length, \" \", i]\n      }, line, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StringSplitter;","map":{"version":3,"sources":["/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js"],"names":["React","Component","regex","StringSplitter","state","lines","props","length","match","onDragOver","e","preventDefault","onDragStart","id","console","log","dataTransfer","setData","onDrop","oldId","getData","a","render","map","line","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,KAAK,GAAG,mBAAd;;AAEA,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCG,KADqC,GAC7B;AACNC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,CAAwBN,KAAxB;AADD,KAD6B;;AAAA,SAKrCO,UALqC,GAKvBC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACD,KAPoC;;AAAA,SASrCC,WATqC,GASvB,CAACF,CAAD,EAAIG,EAAJ,KAAW;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBF,EAAnC;AACAH,MAAAA,CAAC,CAACM,YAAF,CAAeC,OAAf,CAAuB,IAAvB,EAA6BJ,EAA7B;AACD,KAZoC;;AAAA,SAcrCK,MAdqC,GAc5B,CAACR,CAAD,EAAIG,EAAJ,KAAW;AAClB,UAAIM,KAAK,GAAGT,CAAC,CAACM,YAAF,CAAeI,OAAf,CAAuB,IAAvB,CAAZ;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaI,KAAb,GAAqB,MAArB,GAA8BN,EAA1C;AACA,UAAIQ,CAAC,GAAG,KAAKjB,KAAL,CAAWC,KAAX,CAAiBc,KAAjB,CAAR;AACA,WAAKf,KAAL,CAAWC,KAAX,CAAiBc,KAAjB,IAA0B,KAAKf,KAAL,CAAWC,KAAX,CAAiBQ,EAAjB,CAA1B;AACA,WAAKT,KAAL,CAAWC,KAAX,CAAiBQ,EAAjB,IAAuBQ,CAAvB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD,KArBoC;AAAA;;AAuBrCiB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,gBACG,KAAKlB,KAAL,CAAWC,KAAX,CAAiBkB,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,kBACpB;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,UAAU,EAAGf,CAAD,IAAO,KAAKD,UAAL,CAAgBC,CAAhB,CAHrB;AAIE,QAAA,WAAW,EAAGA,CAAD,IAAO,KAAKE,WAAL,CAAiBF,CAAjB,EAAoBe,CAApB,CAJtB;AAKE,QAAA,MAAM,EAAGf,CAAD,IAAO,KAAKQ,MAAL,CAAYR,CAAZ,EAAee,CAAf,CALjB;AAAA,mBAOGD,IAPH,OAOUA,IAAI,CAACjB,MAPf,OAOwBkB,CAPxB;AAAA,SACOD,IADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAvCoC;;AA0CvC,eAAerB,cAAf","sourcesContent":["import React, { Component } from \"react\";\n\nconst regex = /([\\S\\s]){1,80}\\b/g;\n\nclass StringSplitter extends Component {\n  state = {\n    lines: this.props.length.match(regex),\n  };\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  onDragStart = (e, id) => {\n    console.log(\"drag started for: \" + id);\n    e.dataTransfer.setData(\"id\", id);\n  };\n\n  onDrop = (e, id) => {\n    let oldId = e.dataTransfer.getData(\"id\");\n    console.log(\"dropped \" + oldId + \" on \" + id);\n    var a = this.state.lines[oldId];\n    this.state.lines[oldId] = this.state.lines[id];\n    this.state.lines[id] = a;\n    console.log(lines);\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.lines.map((line, i) => (\n          <div\n            key={line}\n            draggable\n            onDragOver={(e) => this.onDragOver(e)}\n            onDragStart={(e) => this.onDragStart(e, i)}\n            onDrop={(e) => this.onDrop(e, i)}\n          >\n            {line} {line.length} {i}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default StringSplitter;\n"]},"metadata":{},"sourceType":"module"}