{"ast":null,"code":"var _jsxFileName = \"/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regex = /([\\S\\s]){1,80}\\b/g;\nlet currentLines;\n\nclass StringSplitter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDragStart = (e, id) => {\n      console.log(\"drag started for: \" + id);\n      e.dataTransfer.setData(\"id\", id);\n    };\n\n    this.onDrop = (e, id) => {\n      let oldId = e.dataTransfer.getData(\"id\");\n      console.log(\"dropped \" + oldId + \" on \" + id);\n      var a = liness[oldId];\n      liness[oldId] = liness[id];\n      liness[id] = a;\n      console.log(liness);\n      setState({\n        lines: currentLines\n      });\n    };\n\n    state = {\n      lines: this.props.length.match(regex)\n    };\n  }\n\n  setState() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.lines.map((line, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        draggable: true,\n        onDragOver: e => this.onDragOver(e),\n        onDragStart: e => this.onDragStart(e, i),\n        onDrop: e => this.onDrop(e, i),\n        children: [line, \" \", line.length, \" \", i]\n      }, line, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StringSplitter;","map":{"version":3,"sources":["/Users/phillafrance/Turbulent/Projects/exercise/src/StringDisplay.js"],"names":["React","Component","regex","currentLines","StringSplitter","constructor","props","onDragOver","e","preventDefault","onDragStart","id","console","log","dataTransfer","setData","onDrop","oldId","getData","a","liness","setState","lines","state","length","match","render","map","line","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,KAAK,GAAG,mBAAd;AAEA,IAAIC,YAAJ;;AAEA,MAAMC,cAAN,SAA6BH,SAA7B,CAAuC;AACrCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,UAPmB,GAOLC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACD,KATkB;;AAAA,SAWnBC,WAXmB,GAWL,CAACF,CAAD,EAAIG,EAAJ,KAAW;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBF,EAAnC;AACAH,MAAAA,CAAC,CAACM,YAAF,CAAeC,OAAf,CAAuB,IAAvB,EAA6BJ,EAA7B;AACD,KAdkB;;AAAA,SAgBnBK,MAhBmB,GAgBV,CAACR,CAAD,EAAIG,EAAJ,KAAW;AAClB,UAAIM,KAAK,GAAGT,CAAC,CAACM,YAAF,CAAeI,OAAf,CAAuB,IAAvB,CAAZ;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaI,KAAb,GAAqB,MAArB,GAA8BN,EAA1C;AACA,UAAIQ,CAAC,GAAGC,MAAM,CAACH,KAAD,CAAd;AACAG,MAAAA,MAAM,CAACH,KAAD,CAAN,GAAgBG,MAAM,CAACT,EAAD,CAAtB;AACAS,MAAAA,MAAM,CAACT,EAAD,CAAN,GAAaQ,CAAb;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AACAC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,KAAK,EAAEnB;AADA,OAAD,CAAR;AAGD,KA1BkB;;AAEjBoB,IAAAA,KAAK,GAAG;AACND,MAAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWkB,MAAX,CAAkBC,KAAlB,CAAwBvB,KAAxB;AADD,KAAR;AAGD;;AAuBDmB,EAAAA,QAAQ,GAAG,CAAE;;AAEbK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,gBACG,KAAKH,KAAL,CAAWD,KAAX,CAAiBK,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,kBACpB;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,UAAU,EAAGrB,CAAD,IAAO,KAAKD,UAAL,CAAgBC,CAAhB,CAHrB;AAIE,QAAA,WAAW,EAAGA,CAAD,IAAO,KAAKE,WAAL,CAAiBF,CAAjB,EAAoBqB,CAApB,CAJtB;AAKE,QAAA,MAAM,EAAGrB,CAAD,IAAO,KAAKQ,MAAL,CAAYR,CAAZ,EAAeqB,CAAf,CALjB;AAAA,mBAOGD,IAPH,OAOUA,IAAI,CAACJ,MAPf,OAOwBK,CAPxB;AAAA,SACOD,IADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA/CoC;;AAkDvC,eAAexB,cAAf","sourcesContent":["import React, { Component } from \"react\";\n\nconst regex = /([\\S\\s]){1,80}\\b/g;\n\nlet currentLines;\n\nclass StringSplitter extends Component {\n  constructor(props) {\n    super(props);\n    state = {\n      lines: this.props.length.match(regex),\n    };\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  onDragStart = (e, id) => {\n    console.log(\"drag started for: \" + id);\n    e.dataTransfer.setData(\"id\", id);\n  };\n\n  onDrop = (e, id) => {\n    let oldId = e.dataTransfer.getData(\"id\");\n    console.log(\"dropped \" + oldId + \" on \" + id);\n    var a = liness[oldId];\n    liness[oldId] = liness[id];\n    liness[id] = a;\n    console.log(liness);\n    setState({\n      lines: currentLines,\n    });\n  };\n\n  setState() {}\n\n  render() {\n    return (\n      <div>\n        {this.state.lines.map((line, i) => (\n          <div\n            key={line}\n            draggable\n            onDragOver={(e) => this.onDragOver(e)}\n            onDragStart={(e) => this.onDragStart(e, i)}\n            onDrop={(e) => this.onDrop(e, i)}\n          >\n            {line} {line.length} {i}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default StringSplitter;\n"]},"metadata":{},"sourceType":"module"}